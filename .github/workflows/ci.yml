# .github/workflows/ci.yml
# Este archivo define el pipeline de CI/CD para tu microservicio
# Se ejecuta automáticamente en cada push y pull request

name: CI/CD Pipeline

# Define cuándo se ejecuta este workflow
on:
  # Se ejecuta en cada push a cualquier rama
  push:
    branches: ['**']
  # Se ejecuta cuando alguien abre o actualiza un pull request
  pull_request:
    branches: [main, develop]

# Variables de entorno globales disponibles en todos los jobs
env:
  # Nombre de tu imagen de Docker
  IMAGE_NAME: ecommerce-auth-service
  # Registry donde se subirá la imagen (ajusta según tu caso)
  REGISTRY: ghcr.io
  # Usuario de GitHub (se usa automáticamente)
  REGISTRY_USER: ${{ github.actor }}

# Jobs que se ejecutarán - cada job puede correr en paralelo o secuencialmente
jobs:
  # ============================================
  # JOB 1: Linting y Validación de Código
  # ============================================
  # lint:
  #   name: Lint and Code Quality
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout del código del repositorio
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Configurar Node.js para poder correr npm
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22'
  #         # Cachear node_modules para acelerar builds futuros
  #         cache: 'npm'

  #     # Instalar dependencias
  #     - name: Install dependencies
  #       run: npm ci

      # # Ejecutar linter (ESLint)
      # - name: Run ESLint
      #   run: npm run lint
      #   # Continúa incluso si falla para poder ver otros errores
      #   continue-on-error: false

      # # Verificar formato de código con Prettier
      # - name: Check code formatting
      #   run: npm run format:check
      #   continue-on-error: false

  # ============================================
  # JOB 2: Tests Unitarios
  # ============================================
  # test:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest
  #   # Este job depende de que lint pase primero
  #   needs: lint

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     # Ejecutar tests unitarios con coverage
  #     - name: Run unit tests
  #       run: npm run test:unit -- --coverage

  #     # Subir reporte de coverage a GitHub
  #     - name: Upload coverage reports
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ./coverage/coverage-final.json
  #         flags: unittests
  #         name: codecov-umbrella

  # ============================================
  # JOB 3: Tests E2E
  # ============================================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    # needs: lint

    # Servicio de PostgreSQL para tests e2e
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Generar el cliente de Prisma
      - name: Generate Prisma Client
        run: npm run prisma:generate

      # Preparar la base de datos (aplicar esquema)
      - name: Prepare test database
        env:
          DATABASE_URL_TEST: postgresql://postgres:test@localhost:5433/postgres
        run: npm run test:e2e:prepare

      # Ejecutar tests e2e
      - name: Run E2E tests
        env:
          DATABASE_URL_TEST: postgresql://postgres:test@localhost:5433/postgres
          NODE_ENV: test
        run: npm run test:e2e:run

  # ============================================
  # JOB 4: Build de Imagen Docker
  # ============================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    # Este job necesita que los tests pasen primero
    needs: [e2e-test]

    # Permisos necesarios para subir imágenes a GitHub Container Registry
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurar Docker Buildx para builds optimizados
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login al registry de contenedores
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extraer metadata para tags de la imagen
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag con el SHA del commit
            type=sha,prefix={{branch}}-
            # Tag con el nombre de la rama
            type=ref,event=branch
            # Tag "latest" solo para la rama main
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag con versión semántica si es un release
            type=semver,pattern={{version}}

      # Construir y subir la imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Usar Dockerfile de producción, no Dockerfile.dev
          file: ./Dockerfile
          # Solo hacer push si estamos en main o develop
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Cachear layers para builds más rápidos
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # JOB 5: Escaneo de Seguridad
  # ============================================
  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build
  #   # Solo escanear si se construyó y subió la imagen
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Escanear vulnerabilidades con Trivy
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'CRITICAL,HIGH'

  #     # Subir resultados a GitHub Security
  #     - name: Upload Trivy results to GitHub Security
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # ============================================
  # JOB 6: Deploy (solo en main)
  # ============================================
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [build, security-scan]
  #   # Solo desplegar desde la rama main
  #   if: github.ref == 'refs/heads/main'

  #   # Requiere aprobación manual antes de desplegar
  #   environment:
  #     name: production
  #     url: https://api.tudominio.com

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Aquí irían los pasos de deploy específicos para tu infraestructura
  #     # Por ejemplo, actualizar un cluster de Kubernetes, ECS, etc.

  #     - name: Deploy to Kubernetes
  #       run: |
  #         echo "Aquí iría el comando para desplegar a Kubernetes"
  #         echo "Por ejemplo: kubectl set image deployment/${{ env.IMAGE_NAME }} app=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

  #     # Notificar en Slack del despliegue exitoso
  #     - name: Notify Slack
  #       uses: slackapi/slack-github-action@v1
  #       with:
  #         payload: |
  #           {
  #             "text": "✅ ${{ env.IMAGE_NAME }} deployed to production successfully!"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
