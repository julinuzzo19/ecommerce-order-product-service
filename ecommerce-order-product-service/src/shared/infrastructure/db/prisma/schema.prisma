generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String   @id @default(uuid())
  sku           String   @unique
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @db.SmallInt
  isActive      Boolean  @default(true)
  category      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  OrderItem OrderItem[]

  @@index([category])
  @@map("products")
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phoneNumber String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Foreign keys
  addressId String @unique

  // Relations
  Order   Order[]
  address Address @relation(fields: [addressId], references: [id])

  @@index([email])
  @@map("customers")
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime

  // Relations
  customer Customer?

  @@map("addresses")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  customerId String

  // Relations
  orderItems OrderItem[]
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Restrict)

  @@index([customerId])
  @@index([status])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(uuid())
  quantity Int     @db.SmallInt
  price    Decimal @db.Decimal(10, 2)

  // Foreign keys
  orderNumber String
  productId   String

  // Relations
  order   Order   @relation(fields: [orderNumber], references: [orderNumber], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([orderNumber, productId])
  @@index([orderNumber])
  @@index([productId])
  @@index([orderNumber, productId]) // Índice compuesto para consultas específicas
  @@map("order_items")
}
